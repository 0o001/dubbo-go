// Code generated by MockGen. DO NOT EDIT.
// Source: cluster/directory.go

// Package mock_cluster is a generated GoMock package.
package mock_cluster

import (
	reflect "reflect"

	common "github.com/apache/dubbo-go/common"
	protocol "github.com/apache/dubbo-go/protocol"
	gomock "github.com/golang/mock/gomock"
)

// MockDirectory is a mock of Directory interface.
type MockDirectory struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryMockRecorder
}

// MockDirectoryMockRecorder is the mock recorder for MockDirectory.
type MockDirectoryMockRecorder struct {
	mock *MockDirectory
}

// NewMockDirectory creates a new mock instance.
func NewMockDirectory(ctrl *gomock.Controller) *MockDirectory {
	mock := &MockDirectory{ctrl: ctrl}
	mock.recorder = &MockDirectoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectory) EXPECT() *MockDirectoryMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockDirectory) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDirectoryMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDirectory)(nil).Destroy))
}

// GetUrl mocks base method.
func (m *MockDirectory) GetUrl() *common.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrl")
	ret0, _ := ret[0].(*common.URL)
	return ret0
}

// GetUrl indicates an expected call of GetUrl.
func (mr *MockDirectoryMockRecorder) GetUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrl", reflect.TypeOf((*MockDirectory)(nil).GetUrl))
}

// IsAvailable mocks base method.
func (m *MockDirectory) IsAvailable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockDirectoryMockRecorder) IsAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockDirectory)(nil).IsAvailable))
}

// List mocks base method.
func (m *MockDirectory) List(invocation protocol.Invocation) []protocol.Invoker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", invocation)
	ret0, _ := ret[0].([]protocol.Invoker)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockDirectoryMockRecorder) List(invocation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDirectory)(nil).List), invocation)
}

// ServiceHealthState mocks base method.
func (m *MockDirectory) ServiceHealthState() *protocol.ServiceHealthState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceHealthState")
	ret0, _ := ret[0].(*protocol.ServiceHealthState)
	return ret0
}

// ServiceHealthState indicates an expected call of ServiceHealthState.
func (mr *MockDirectoryMockRecorder) ServiceHealthState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceHealthState", reflect.TypeOf((*MockDirectory)(nil).ServiceHealthState))
}
